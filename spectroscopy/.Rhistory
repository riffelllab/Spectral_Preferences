#pulls out the correct pwm value from "PWM"
#depending on "side" and "wl"
if(side=="a") pwm.value <- PWM$a_pwm[PWM$wl==wl]
if(side=="b") pwm.value <- PWM$b_pwm[PWM$wl==wl]
#multiply the column by the pwm value divided by the max pwm value of 4096
column * (pwm.value/4096)
}
#create the predicted spectra
led.spectra.pred <-
#use the full intensity spectra as input
led.spectra.full %>%
#scale by the pwm values determined during calibration
mutate( across( !matches("wl"), ~ pwm.scale(.x, cur_column() ) ) ) %>%
#intensity of the LEDs is then lowered to account for the transmission
#of the 7 layers of tulle making up the stimulus bullseye
mutate( across( !matches("wl"), ~ .x * black_tulle$tulle_7 ) )
#------  output a pdf graph of the predicted a side LED spectra Fig. 1f  ------
#x and y axis limits
xlim<-c(350,800)
ylim<-c(0,2.2e10)
#These cex value set the relative font size relative to pointsize below
cex.axis<-0.75
cex.lab<-1 #mtext is not affected by the cex reduction
#Position of the mtext axis labels in lines, one line 0.2"
mtext.line.x<-1.2
mtext.line.y<-1.6
#tick length
tcl<-(-0.3)
#tick label position, x and y labels need different spacing
mgp.x<-c(3, 0.2, 0)
mgp.y<-c(3, 0.4, 0)
#sets line width for spectra
lwd<-2
#Set figure width and calculate plot sizes and figure height
#All inputs in inches
f_width<-4
f_height<-1.8
m_bottom<-0.3
m_left<-0.4
m_top<-0.1
m_right<-0.1
pdf(file=paste0(output_dir,"figure 1e.pdf"),
width=f_width, height=f_height, pointsize = 8)
#Margins
par(mai=c(m_bottom,m_left,m_top,m_right)) #inner margins in inches
plot.new()
plot.window(xlim=xlim, ylim=ylim, xaxs="i", yaxs="i")
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
#axis(1, at=seq(xlim[1],xlim[2],5), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("wavelength (nm)", side=1, line=mtext.line.x)
mtext("photon flux (photons/cm2/s)", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#draws lines for all a channel led spectra (columns 2 to 18)
#color for each line is determined by the wavelength from a custom color palette
for(i in seq(2, 18, 1) ){
wl <- names(led.spectra.pred[i]) %>% gsub("[a|b]\\.", "", .)
lines(led.spectra.pred$wl, led.spectra.pred[,i], lwd=lwd, col=color_lookup(wl,"1.00"))
}
#closes graph pdf
dev.off()
#imports necessary libraries
library(dplyr)
#Sets the output directory
output_dir<-"../figures/"
#---- import and process the transmission spectra
transmission<-
read.csv("reflectance and transmission/transmission measurements.csv") %>%
#converts from 0-100 to 0-1
mutate(across(!matches("wl"),  ~./100)) %>%
#limits graphed line to 370-800 nm
mutate(across(.cols = !matches("wl"),  ~ case_when(
wl < 370 ~ NA,
wl > 800 ~ NA,
TRUE ~ .)))
wind_tunnel_floor<-
read.csv("reflectance and transmission/wind tunnel floor.csv") %>%
#converts from 0-100 to 0-1
mutate(across(!matches("wl"),  ~./100)) %>%
#limits graphed line to 370-800 nm
mutate(across(.cols = !matches("wl"),  ~ case_when(
wl < 365 ~ NA,
wl > 730 ~ NA,
TRUE ~ .))) %>%
#creates a mean spectrum
mutate(mean = rowMeans( select(., !matches("wl") ) ), .after=wl )
black_tulle<-
read.csv("reflectance and transmission/black tulle tansmission.csv") %>%
#converts from 0-100 to 0-1
mutate(across(!matches("wl"),  ~./100))
#approximates black tulle transmissiont to the same wl values as the other transmission data
tulle_1_interp = approx(x=black_tulle$wl, y=black_tulle$tulle_1, xout=transmission$wl)[[2]]
#---- calculate average transmission across visible range with
#---- different number of tulle layers
tulle_layers<-
black_tulle %>%
#filter to visible range to compare similar spectral range as
#photographic measurements of reflectance
filter(wl >=400 & wl <= 700) %>%
#takes the mean value of each column
summarize(across(!matches("wl"), mean)) %>%
#transposes row to a column and turns output back to dataframe ("t()" outs a matrix)
t() %>% as.data.frame() %>%
#turn the row names into a column
tibble::rownames_to_column() %>%
#rename columns
rename(layers = rowname, transmission = 2) %>%
#removes "Tulle_" from values and turns them numeric
mutate(layers = gsub("tulle_", "", layers)) %>%
#converts text to numbers
mutate(layers = as.numeric(layers)) %>%
#adds row for 100% transmission with 0 layers
add_row(layers = 0, transmission = 1)%>%
#sort by "layers"
arrange(layers) %>%
#read in and join reflectance data determined through photographic measurment
left_join(read.csv("reflectance and transmission/black tulle reflectance.csv")) %>%
#rename joined column
rename(reflectance = int_mean) %>%
#normalize column joined column to put on 0-1 scale
mutate(reflectance = reflectance / max(reflectance, na.rm=TRUE))
#Fit models to estimate the relationship between tulle layers and transmission / relfectance
tulle.trans.m<-nls(transmission ~ exp(r * layers), data=tulle_layers, start=list(r = 0))
tulle.reflect.m<-nls(reflectance ~ exp(r * layers), data=tulle_layers, start=list(r = 0))
summary(tulle.trans.m)
summary(tulle.reflect.m)
#---- import and process the reflection spectra for the cotton broadcloth
reflect<-
read.csv("reflectance and transmission/white fabric reflection.csv") %>%
#converts from 0-100 to 0-1
mutate(across(!matches("wl"),  ~./100)) %>%
#calculate reflectance of white fabric with a single layer of tulle
#by multiplying the tulle transmission twice as light is passing
#through the tulle layer twice during reflection (see Fig. S1f)
mutate(white_fabric_w_tulle = white_fabric*tulle_1_interp*tulle_1_interp)
#---- import and process the projector irradiance spectra
projector<-
read.csv("irradiance/projector.csv") %>%
#drops the column for the gray portion of the horizon
select(!grey) %>%
#Converts spectra from µwatts (default unit in spectrasuite) to photons
#(see Johnsen 2011, The Optics of Life, Chpt 2)
#The "1000000" here is to convert µwatts to watts
mutate(white = white*wl*(5050000000000000/1000000)) %>%
#narrows the range of the spectra to 420-650 nm
mutate(white = case_when(
wl < 400 ~ NA,
wl > 660 ~ NA,
TRUE ~ white )) %>%
#accounts for transmission through the acrylic wall of the wind tunnel
#and SpyeDark panel by mutiplying the spectra by their transmission
mutate(white = white * wind_tunnel_floor$mean * transmission$spyedark) %>%
#normalize the white spectrum by it's mean
mutate(white = white / mean(white, na.rm=TRUE))
#pulls out the 99th percentile of the white spectrum in order to
#normalize all irradiance spectra to put them on the same relative scale
normalize_value<- quantile(projector$white, 0.99, na.rm=TRUE)
#normalize the projector white spectra to the normalize_value
projector<-
projector %>%
mutate(white = white / normalize_value)
#---- imports the previously calculates composite gray spectra
#---- see "spectroscopy/irradiance/composite gray spectra.csv"
comp_gray_spectra<-
read.csv("irradiance/composite gray spectra.csv") %>%
mutate(across(!matches("wl"),  ~. / normalize_value))
IR_LEDs<-
read.csv("irradiance/IR LED strips.csv") %>%
#Converts spectra from µwatts (default unit in spectrasuite) to photons
#(see Johnsen 2011, The Optics of Life, Chpt 2)
#The "1000000" here is to convert µwatts to watts
mutate(ir = ir*wl*(5050000000000000/1000000)) %>%
#narrows the range of the spectra to 420-650 nm
mutate(ir = case_when(
wl < 750 ~ NA, TRUE ~ ir )) %>%
#normalize the white spectrum by it's mean
mutate(ir = ir / max(ir, na.rm=TRUE))
#--- Sets Graph display variables
#Set figure width and calculate plot sizes and figure height
#All inputs in inches
f_width<-7.0
m_bottom<-0.4
m_left<-0.4
m_top<-0.1
m_right<-0.1
plot_width<-(f_width-m_right-2*m_left)/2
plot_height<-plot_width*0.6
f_height<-3*plot_height+3*m_bottom+m_top
cex.axis<-0.75
cex.lab<-1 #mtext is not affected by the cex reduction
cex.leg<-1
cex.letter<-1.5
#Position of the mtext axis labels in lines, one line 0.2"
mtext.line.x<-1.2
mtext.line.y<-1.4
#x and y positions of subplot labels
subplot_x<-1
subplot_y<-0.90
#tick length
tcl<-(-0.2)
#tick label position, x and y labels need different spacing
mgp.x<-c(3, 0.1, 0)
mgp.y<-c(3, 0.3, 0)
#sets line width for spectra
lwd<-1.5
#sets color palette
#other plots
col_llgray<-hsv(0,0,0.80)
col_lgray<-hsv(0,0,0.75)
col_mgray<-hsv(0,0,0.65)
col_dgray<-hsv(0,0,0.45)
col_lgray_transp<-hsv(0,0,0.80, alpha=0.75)
#--------------------------------------------------------
#---- Execute from here to the end to generate graph ----
#--------------------------------------------------------
# #Export figure to a pdf with the width and height from above
# #cairo_pdf is used as it will embed the font used into the pdf
pdf(file=paste0(output_dir,"figure S1.pdf"), width=f_width, height=f_height,
pointsize=8, family="sans")
#Export figure to a png with the width and height from above
#also sets font type and size
# png(file=paste0(output_dir,"figure S1.png"),
#     width=f_width, height=f_height, units="in", res=150,
#     family="sans", pointsize=8)
#Margins
par(mai=c(m_bottom,m_left,0,0), #inner margins in inches
omi=c(0,0,m_top,m_right), #outer margins in inches
mfrow=c(3,2), #makes a grid of plots (3 rows, 2 columns)
cex=1) #prevents cex scaling in the subplots due to mfrow
#---- Plot a ------
xlim<-c(370,780)
ylim<-c(0,1.1)
plot.new()
plot.window(xlim=xlim, ylim=ylim, yaxs="i")
#projector line
lines(projector$wl, projector$white, lwd=lwd*1.33, col="black")
#component spectra
lines(comp_gray_spectra$wl, comp_gray_spectra$a.450, lwd=lwd*0.5, col=hsv(169/255,1,1))
lines(comp_gray_spectra$wl, comp_gray_spectra$a.505, lwd=lwd*0.5, col=hsv(119/255,1,1))
lines(comp_gray_spectra$wl, comp_gray_spectra$a.525, lwd=lwd*0.5, col=hsv(102/255,1,1))
lines(comp_gray_spectra$wl, comp_gray_spectra$a.545, lwd=lwd*0.5, col=hsv(85/255,1,1))
lines(comp_gray_spectra$wl, comp_gray_spectra$a.570, lwd=lwd*0.5, col=hsv(50/255,1,1))
lines(comp_gray_spectra$wl, comp_gray_spectra$a.590, lwd=lwd*0.5, col=hsv(32/255,1,1))
lines(comp_gray_spectra$wl, comp_gray_spectra$a.625, lwd=lwd*0.5, col=hsv(0,1,1))
#composite spectra
lines(comp_gray_spectra$wl, comp_gray_spectra$comp_spectra, lwd=lwd*1.33, col=col_lgray_transp)
#line labels
text("stimulus\nlight spots", x=640, y=0.5, adj=c(0,0), col=col_lgray, cex=cex.leg)
text("DLP projector", x=480, y=0.9, adj=c(0,0), col="black", cex=cex.leg)
#subplot label
text(xlim[1]*subplot_x, ylim[2]*subplot_y, substitute(paste(bold("A"))),
adj=c(0,0.5), cex=cex.letter)
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("wavelength (nm)", side=1, line=mtext.line.x)
mtext("relative photon flux", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#---- Plot b ------
xlim<-c(450,900)
ylim<-c(0,1.1)
plot.new()
plot.window(xlim=xlim, ylim=ylim, yaxs="i")
#IR spectra
lines(IR_LEDs$wl, IR_LEDs$ir, lwd=lwd, col=col_mgray)
#line labels
text(840, 1.0, "IR strip lights", adj=c(1,1), col=col_mgray, cex=cex.leg)
#subplot label
text(xlim[1]*subplot_x, ylim[2]*subplot_y, substitute(paste(bold("B"))),
adj=c(0,0.5), cex=cex.letter)
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("wavelength (nm)", side=1, line=mtext.line.x)
mtext("relative photon flux", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#---- Plot c ------
xlim<-c(370,780)
ylim<-c(0,1.1)
plot.new()
plot.window(xlim=xlim, ylim=ylim, yaxs="i")
#Transmission of acrylic wall of the windtunnel and the SpyeDark panel
lines(wind_tunnel_floor$wl, wind_tunnel_floor$mean, lwd=lwd, col=col_mgray)
lines(transmission$wl, transmission$spyedark, lwd=lwd, col="black")
#line labels
text(600, 0.88, "acrylic", adj=c(0.5,0), col=col_mgray, cex=cex.leg)
text(600, 0.26, "SpyeDark", adj=c(0.5,0), col="black", cex=cex.leg)
#subplot label
text(xlim[1]*subplot_x, ylim[2]*subplot_y, substitute(paste(bold("C"))),
adj=c(0,0.5), cex=cex.letter)
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("wavelength (nm)", side=1, line=mtext.line.x)
mtext("transmission", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#---- Plot d ------
xlim<-c(370,780)
ylim<-c(0,1.1)
plot.new()
plot.window(xlim=xlim, ylim=ylim, yaxs="i")
#Transmission of cotton broadcloth and black tulle
lines(transmission$wl, tulle_1_interp, lwd=lwd, col="black")
lines(transmission$wl, transmission$white_fabric, lwd=lwd, col=col_llgray)
#line labels
text(600, 0.90, "black tulle", adj=c(0.5,0), col="black", cex=cex.leg)
text(600, 0.69, "cotton broadcloth", adj=c(0.5,0), col=col_lgray, cex=cex.leg)
#subplot label
text(xlim[1]*subplot_x, ylim[2]*subplot_y, substitute(paste(bold("D"))),
adj=c(0,0.5), cex=cex.letter)
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("wavelength (nm)", side=1, line=mtext.line.x)
mtext("transmission", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#---- Plot e ------
xlim<-c(370,780)
ylim<-c(0,1.1)
plot.new()
plot.window(xlim=xlim, ylim=ylim, yaxs="i")
#Diffuse reflectance of the cotton broadcloth
lines(reflect$wl, reflect$white_fabric, lwd=lwd, col=col_llgray)
lines(reflect$wl, reflect$white_fabric_w_tulle, lwd=lwd, col=col_mgray)
#line labels
text(600, 0.82, "cotton broadcloth", adj=c(0.5,0), col=col_lgray, cex=cex.leg)
text(600, 0.55, "cotton broadcloth\nand black tulle", adj=c(0.5,1), col=col_mgray, cex=cex.leg)
#subplot label
text(xlim[1]*subplot_x, ylim[2]*subplot_y, substitute(paste(bold("E"))),
adj=c(0,0.5), cex=cex.letter)
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("wavelength (nm)", side=1, line=mtext.line.x)
mtext("reflectance", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#---- Plot f ------
xlim<-c(-0.75,8)
ylim<-c(0,1.1)
plot.new()
plot.window(xlim=xlim, ylim=ylim, yaxs="i")
#reflectance and transmission points
points(tulle_layers$layers, tulle_layers$transmission, pch=21, col=col_lgray, cex=1)
points(tulle_layers$layers, tulle_layers$reflectance, pch=21, col=col_dgray, cex=1)
#predicted lines based on the model calculated above
layer_seq<-seq(0,8,0.05)
lines(layer_seq, exp(coef(tulle.trans.m) * layer_seq), lwd=lwd, col=col_lgray)
lines(layer_seq, exp(2 * coef(tulle.trans.m) * layer_seq), lwd=lwd, col=col_dgray)
#line labels
text(4.3, 0.70, "transmission", adj=c(0,0.5), col=col_lgray, cex=cex.leg)
text(-0.5, 0.47, "reflectance", adj=c(0,0.5), col=col_dgray, cex=cex.leg)
#equation text
text(4.3, 0.60, expression(italic(e)^"-0.17 x n(layers)"), adj=c(0,0.5), col=col_lgray, cex=cex.leg)
text(-0.5, 0.37, expression(italic(e)^"-0.17 x 2n(layers)"), adj=c(0,0.5), col=col_dgray, cex=cex.leg)
#subplot label
text(xlim[1]*subplot_x, ylim[2]*subplot_y, substitute(paste(bold("F"))),
adj=c(0,0.5), cex=cex.letter)
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("layers of black tulle", side=1, line=mtext.line.x)
mtext("reflectance / transmission", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#Close Graph dev
dev.off()
#Export figure to a png with the width and height from above
#also sets font type and size
png(file=paste0(output_dir,"figure S1.png"),
width=f_width, height=f_height, units="in", res=150,
family="sans", pointsize=8)
#Margins
par(mai=c(m_bottom,m_left,0,0), #inner margins in inches
omi=c(0,0,m_top,m_right), #outer margins in inches
mfrow=c(3,2), #makes a grid of plots (3 rows, 2 columns)
cex=1) #prevents cex scaling in the subplots due to mfrow
#---- Plot a ------
xlim<-c(370,780)
ylim<-c(0,1.1)
plot.new()
plot.window(xlim=xlim, ylim=ylim, yaxs="i")
#projector line
lines(projector$wl, projector$white, lwd=lwd*1.33, col="black")
#component spectra
lines(comp_gray_spectra$wl, comp_gray_spectra$a.450, lwd=lwd*0.5, col=hsv(169/255,1,1))
lines(comp_gray_spectra$wl, comp_gray_spectra$a.505, lwd=lwd*0.5, col=hsv(119/255,1,1))
lines(comp_gray_spectra$wl, comp_gray_spectra$a.525, lwd=lwd*0.5, col=hsv(102/255,1,1))
lines(comp_gray_spectra$wl, comp_gray_spectra$a.545, lwd=lwd*0.5, col=hsv(85/255,1,1))
lines(comp_gray_spectra$wl, comp_gray_spectra$a.570, lwd=lwd*0.5, col=hsv(50/255,1,1))
lines(comp_gray_spectra$wl, comp_gray_spectra$a.590, lwd=lwd*0.5, col=hsv(32/255,1,1))
lines(comp_gray_spectra$wl, comp_gray_spectra$a.625, lwd=lwd*0.5, col=hsv(0,1,1))
#composite spectra
lines(comp_gray_spectra$wl, comp_gray_spectra$comp_spectra, lwd=lwd*1.33, col=col_lgray_transp)
#line labels
text("stimulus\nlight spots", x=640, y=0.5, adj=c(0,0), col=col_lgray, cex=cex.leg)
text("DLP projector", x=480, y=0.9, adj=c(0,0), col="black", cex=cex.leg)
#subplot label
text(xlim[1]*subplot_x, ylim[2]*subplot_y, substitute(paste(bold("A"))),
adj=c(0,0.5), cex=cex.letter)
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("wavelength (nm)", side=1, line=mtext.line.x)
mtext("relative photon flux", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#---- Plot b ------
xlim<-c(450,900)
ylim<-c(0,1.1)
plot.new()
plot.window(xlim=xlim, ylim=ylim, yaxs="i")
#IR spectra
lines(IR_LEDs$wl, IR_LEDs$ir, lwd=lwd, col=col_mgray)
#line labels
text(840, 1.0, "IR strip lights", adj=c(1,1), col=col_mgray, cex=cex.leg)
#subplot label
text(xlim[1]*subplot_x, ylim[2]*subplot_y, substitute(paste(bold("B"))),
adj=c(0,0.5), cex=cex.letter)
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("wavelength (nm)", side=1, line=mtext.line.x)
mtext("relative photon flux", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#---- Plot c ------
xlim<-c(370,780)
ylim<-c(0,1.1)
plot.new()
plot.window(xlim=xlim, ylim=ylim, yaxs="i")
#Transmission of acrylic wall of the windtunnel and the SpyeDark panel
lines(wind_tunnel_floor$wl, wind_tunnel_floor$mean, lwd=lwd, col=col_mgray)
lines(transmission$wl, transmission$spyedark, lwd=lwd, col="black")
#line labels
text(600, 0.88, "acrylic", adj=c(0.5,0), col=col_mgray, cex=cex.leg)
text(600, 0.26, "SpyeDark", adj=c(0.5,0), col="black", cex=cex.leg)
#subplot label
text(xlim[1]*subplot_x, ylim[2]*subplot_y, substitute(paste(bold("C"))),
adj=c(0,0.5), cex=cex.letter)
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("wavelength (nm)", side=1, line=mtext.line.x)
mtext("transmission", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#---- Plot d ------
xlim<-c(370,780)
ylim<-c(0,1.1)
plot.new()
plot.window(xlim=xlim, ylim=ylim, yaxs="i")
#Transmission of cotton broadcloth and black tulle
lines(transmission$wl, tulle_1_interp, lwd=lwd, col="black")
lines(transmission$wl, transmission$white_fabric, lwd=lwd, col=col_llgray)
#line labels
text(600, 0.90, "black tulle", adj=c(0.5,0), col="black", cex=cex.leg)
text(600, 0.69, "cotton broadcloth", adj=c(0.5,0), col=col_lgray, cex=cex.leg)
#subplot label
text(xlim[1]*subplot_x, ylim[2]*subplot_y, substitute(paste(bold("D"))),
adj=c(0,0.5), cex=cex.letter)
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("wavelength (nm)", side=1, line=mtext.line.x)
mtext("transmission", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#---- Plot e ------
xlim<-c(370,780)
ylim<-c(0,1.1)
plot.new()
plot.window(xlim=xlim, ylim=ylim, yaxs="i")
#Diffuse reflectance of the cotton broadcloth
lines(reflect$wl, reflect$white_fabric, lwd=lwd, col=col_llgray)
lines(reflect$wl, reflect$white_fabric_w_tulle, lwd=lwd, col=col_mgray)
#line labels
text(600, 0.82, "cotton broadcloth", adj=c(0.5,0), col=col_lgray, cex=cex.leg)
text(600, 0.55, "cotton broadcloth\nand black tulle", adj=c(0.5,1), col=col_mgray, cex=cex.leg)
#subplot label
text(xlim[1]*subplot_x, ylim[2]*subplot_y, substitute(paste(bold("E"))),
adj=c(0,0.5), cex=cex.letter)
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("wavelength (nm)", side=1, line=mtext.line.x)
mtext("reflectance", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#---- Plot f ------
xlim<-c(-0.75,8)
ylim<-c(0,1.1)
plot.new()
plot.window(xlim=xlim, ylim=ylim, yaxs="i")
#reflectance and transmission points
points(tulle_layers$layers, tulle_layers$transmission, pch=21, col=col_lgray, cex=1)
points(tulle_layers$layers, tulle_layers$reflectance, pch=21, col=col_dgray, cex=1)
#predicted lines based on the model calculated above
layer_seq<-seq(0,8,0.05)
lines(layer_seq, exp(coef(tulle.trans.m) * layer_seq), lwd=lwd, col=col_lgray)
lines(layer_seq, exp(2 * coef(tulle.trans.m) * layer_seq), lwd=lwd, col=col_dgray)
#line labels
text(4.3, 0.70, "transmission", adj=c(0,0.5), col=col_lgray, cex=cex.leg)
text(-0.5, 0.47, "reflectance", adj=c(0,0.5), col=col_dgray, cex=cex.leg)
#equation text
text(4.3, 0.60, expression(italic(e)^"-0.17 x n(layers)"), adj=c(0,0.5), col=col_lgray, cex=cex.leg)
text(-0.5, 0.37, expression(italic(e)^"-0.17 x 2n(layers)"), adj=c(0,0.5), col=col_dgray, cex=cex.leg)
#subplot label
text(xlim[1]*subplot_x, ylim[2]*subplot_y, substitute(paste(bold("F"))),
adj=c(0,0.5), cex=cex.letter)
#Axes
axis(1, at=axisTicks(xlim, log=F), mgp=mgp.x, tcl=tcl, cex.axis=cex.axis)
axis(2, at=axisTicks(ylim, log=F), mgp=mgp.y, tcl=tcl, cex.axis=cex.axis)
mtext("layers of black tulle", side=1, line=mtext.line.x)
mtext("reflectance / transmission", side=2, line=mtext.line.y, cex.lab=cex.lab)
box(bty="l")
#Close Graph dev
dev.off()
